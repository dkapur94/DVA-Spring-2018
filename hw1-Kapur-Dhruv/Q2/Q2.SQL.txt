-- initial commands
.headers off
.separator ','

-- (a) Import data
-- [insert sql statement(s) below]
create table athletes(id integer, sex text, dob text, height float, weight integer, nationality text);
.schema 
.import athletes.csv athletes
create table countries(country text, code text, population integer, gdp float);
.schema 
.import countries.csv countries
create table games(id integer, name text, nationality text, sport text, gold integer, silver integer, bronze integer);
.schema
.import games.csv games	 

-- (b) Build indexes
-- [insert sql statement(s) below]
create index id_index on athletes(id);
create index nationalty_index on athletes(nationality);
create index id_games_index on games(id);
create index code_index on countries(code);
 



-- (c) Quick computation.
-- [insert sql statement(s) below]
select sum(gold) from games where nationality = "USA";

select '';

-- (d) Distinct Sports.
-- [insert sql statement(s) below]
select distinct sport from games where (gold is not null and nationality = "USA") order by sport asc;

select '';

-- (e) Handling Empty Cells.
-- [insert sql statement(s) below]
update countries set population = null where population = '';
select  country, sum(gold+silver+bronze)
from games
inner join countries on (games.nationality = countries.code)
group by country
order by population desc
limit 5;

select '';

-- (f) Female Athletes.
-- [insert sql statement(s) below]
select country, count (*) as count
from games
inner join athletes on (games.id = athletes.id)
inner join countries on (games.nationality =  countries.code)
where (gold > 0  and sex  = 'female')
group by country
order by count desc
limit 5;

select '';

-- (g) Fit Athletes
-- [insert sql statement(s) below]
select name,(weight/(height*height)) as bmi
from games
inner join athletes on (games.id=athletes.id)
where (bmi between 18.5 and 24.9 and athletes.id = games.id)
order by name,bmi asc
limit 10;
 
select '';

-- (h) Percentages of Gold & Silver Medals.
-- [insert sql statement(s) below]
select country, (sum(gold)*100/(select sum (gold) from games)) as gp, (sum(silver)*100/(select sum (silver) from games)) as sp 
from games
inner join countries on (games.nationality = countries.code)
group by country
order by gp desc,sp desc
limit 20;

select '';

-- (i) Creating a view.
-- [insert sql statement(s) below]
create view gdp_metrics as
select country1,country2,gdp1-gdp2 as diff
from (select country as country1,gdp as gdp1 from countries)
inner join (select country as country2,gdp as gdp2 from countries)
on (gdp1-gdp2>0 and gdp1-gdp2<=100);
   
select country1,country2,diff 
from gdp_metrics
order by diff desc 
limit 5;
select '';

-- (j) Count total pairs.
-- [insert sql statement(s) below]
select count(*) from gdp_metrics;

select '';

-- (k) Create and import data into FTS table movie_overview.
-- [insert sql statement(s) below]
Create virtual table movie_overview using fts4(id integer, name text, year integer, overview text, popularity decimal);

.import movie-overview.txt movie_overview

-- (k) part 1
-- [insert sql statement(s) below]
Select count(overview) from movie_overview where overview MATCH "^in *";

select '';

-- (k) part 2
-- [insert sql statement(s) below]
select id 
from movie_overview
where overview MATCH 'love NEAR/7 city'
order by id desc; 
    

select '';

-- (k) part 3
-- [insert sql statement(s) below]
select name 
from movie_overview 
where overview MATCH 'geo*';
